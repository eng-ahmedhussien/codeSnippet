<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>
//MARK: - request with headers using responseJSON
let headers : HTTPHeaders = [
    "app-id" : "62fb78b30fb89e62ca11c547"
]
//
AF.request(&lt;#url#&gt;,headers:headers).responseJSON { respons in
    switch respons.result{
    case .failure(let error):
            print(error)
    case .success(_):
        guard let data = respons.data else { return }
        do{
            let json = try JSONDecoder().decode(&lt;# model#&gt;.self, from: data)
            print("success")
        }catch let error{
            print(error)
        }
    }
}
//
AF.request(&lt;#url#&gt;,headers:headers).responseJSON { respons in
    switch respons.result{
    case .failure(let error):
            print(error)
    case .success(_):
            var jsondata = JSON(respons.value)
            var dat = jsondata["data"]
        guard let data = respons.data else { return }
        do{
            let json = try JSONDecoder().decode(&lt;# model#&gt;.self, from: dat.rawData())
            print(json)
            print("success to get all brands")
        }catch let error{
            print(error)

        }
    }
}
//MARK: - request with headers using responseDecodable
AF.request(&lt;#url#&gt;,headers: headers).responseDecodable(of: &lt;# model#&gt;.self) { response in
    switch response.result{
    case .failure(let error):
            print(error)
    case .success(_):
        guard let data = response.data else { return }
        do{
            let json = try JSONDecoder().decode(&lt;# model#&gt;.self, from: data)
            print(json)
            print("success to get all brands")
        }catch let error{
            print(error)
        }
    }
}
//
AF.request(&lt;#url#&gt;,headers:headers).responseDecodable(of: &lt;# model#&gt;.self) { response in
    switch response.result{
    case .failure(let error):
            print(error)
    case .success(_):
            //response.value of kind  Posts
            print(response.value)
            print("success to get all brands")
    }
}
.....................................................................................
//MARK: - example
// "hint" posts is the model and contains [post] called data
// old
func getAllPosts(complition: @escaping ([Post]?, Error?) -&gt; ()) {
    AF.request(Url.shared.getAllPosts()!,headers:Url.shared.headers).responseJSON { respons in
        switch respons.result{
            case .failure(let error):
                print(error)
            case .success(_):
                guard let data = respons.data else { return }
                do{
                    let json = try JSONDecoder().decode(Posts?.self, from: data)
                    complition(json?.data, nil)
                }catch let error{
                    complition(nil,error )
                }
        }
    }
}
func getAllPosts(complition: @escaping ([Post]?, Error?) -&gt; ()) {
    AF.request(Url.shared.getAllPosts()!,headers: Url.shared.headers).responseJSON { respons in
        switch respons.result{
            case .failure(let error):
                print(error)
            case .success(_):
                let jsondata = JSON(respons.value)
                let data = jsondata["data"]
                do{
                    let json = try JSONDecoder().decode([Post].self, from: data.rawData())
                    complition(json, nil)
                }catch let error{
                    complition(nil,error )
                }
        }
    }
}
// new 
func getAllPosts(complition: @escaping ([Post]?, Error?) -&gt; ()) {
    AF.request(Url.shared.getAllPosts()!,headers: Url.shared.headers).responseDecodable(of: Posts.self) { response in
        switch response.result{
            case .failure(let error):
                print(error)
            case .success(_):
                guard let data = response.data else { return }
                do{
                    let json = try JSONDecoder().decode(Posts.self, from: data)
                    complition(json.data, nil)
                }catch let error{
                    complition(nil,error )
                }
        }
    }
}

func getAllPosts(complition: @escaping ([Post]?, Error?) -&gt; ()) {
    AF.request(Url.shared.getAllPosts()!,headers:Url.shared.headers).responseDecodable(of: Posts.self) { response in
        switch response.result{
            case .failure(let error):
                complition(nil,error)
                print(error)
            case .success(_):
                //response.value of kind  Posts
                complition(response.value?.data, nil)
        }
    }
}
//MARK: - 
Alamofire.request(url).responseJSON { response in
    switch response.result {
        case .success( _):
            guard let data = response.data else{return}
            do {
                let decodedData = try JSONDecoder().decode(AllSports.self, from:data)
                completion(decodedData.sports,nil)
            } catch let jsonError {
                completion(nil,jsonError)
            }

        case .failure(let error):
            completion(nil,error)
    }

}

Alamofire.request(url).validate().responseJSON { response in
    switch response.result {
        case .success( _):
            guard let data = response.data else{return}
            do {
                let decodedData = try JSONDecoder().decode(AllSports.self, from:data)
                completion(decodedData.sports,nil)
            } catch let jsonError {
                completion(nil,jsonError)
            }
            
        case .failure(let error):
            completion(nil,error)
    }
    
}
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>D06155D3-2E67-4F0C-B58E-059D39936BBB</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>alamofire</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
