<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>
//MARK: - get request with headers using responseJSON
let headers : HTTPHeaders = [
    "app-id" : "62fb78b30fb89e62ca11c547"
]
//
AF.request(&lt;#url#&gt;,headers:headers).responseJSON { respons in
    switch respons.result{
    case .failure(let error):
            print(error)
    case .success(_):
        guard let data = respons.data else { return }
        do{
            let json = try JSONDecoder().decode(&lt;# model#&gt;.self, from: data)
            print("success")
        }catch let error{
            print(error)
        }
    }
}
//MARK: - get request with headers using responseDecodable
AF.request(&lt;#url#&gt;,headers: headers).responseDecodable(of: &lt;# model#&gt;.self) { response in
    switch response.result{
    case .failure(let error):
            print(error)
    case .success(_):
        guard let data = response.data else { return }
        do{
            let json = try JSONDecoder().decode(&lt;# model#&gt;.self, from: data)
            print(json)
            print("success to get all brands")
        }catch let error{
            print(error)
        }
    }
}
//
AF.request(&lt;#url#&gt;,headers:headers).responseDecodable(of: &lt;# model#&gt;.self) { response in
    switch response.result{
    case .failure(let error):
            print(error)
    case .success(_):
            //response.value of kind  model
            print(response.value)
            print("success to get all brands")
    }
}
.....................................................................................
//MARK: - example
// "hint" posts is the model and contains [post] called data
//old
func getAllPosts(complition: @escaping ([Post]?, Error?) -&gt; ()) {
    AF.request(Url.shared.getAllPosts()!,headers:Url.shared.headers).responseJSON { respons in
        switch respons.result{
            case .failure(let error):
                print(error)
            case .success(_):
                guard let data = respons.data else { return }
                do{
                    let json = try JSONDecoder().decode(Posts?.self, from: data)
                    complition(json?.data, nil)
                }catch let error{
                    complition(nil,error )
                }
        }
    }
}
// new 
func getAllPosts(complition: @escaping ([Post]?, Error?) -&gt; ()) {
    AF.request(Url.shared.getAllPosts()!,headers: Url.shared.headers).responseDecodable(of: Posts.self) { response in
        switch response.result{
            case .failure(let error):
                print(error)
            case .success(_):
                guard let data = response.data else { return }
                do{
                    let json = try JSONDecoder().decode(Posts.self, from: data)
                    complition(json.data, nil)
                }catch let error{
                    complition(nil,error )
                }
        }
    }
}

func getAllPosts(complition: @escaping ([Post]?, Error?) -&gt; ()) {
    AF.request(Url.shared.getAllPosts()!,headers:Url.shared.headers).responseDecodable(of: Posts.self) { response in
        switch response.result{
            case .failure(let error):
                complition(nil,error)
                print(error)
            case .success(_):
                //response.value of kind  Posts
                complition(response.value?.data, nil)
        }
    }
}
//MARK: - post &amp; put request and rescive data
let customer = CustomerAddress(addresses: [address])
let putObject = PutAddress(customer: customer)
guard let url = Url.shared.addAddress(id: "\(customerId)") else {return}

AF.request(url,method: .put,parameters: putObject).responseData{response in
    switch response.result {
    case .success(let data):
        do {
            guard let jsonObject = try JSONSerialization.jsonObject(with: data) as? [String: Any] else {
                print("Error: Cannot convert data to JSON object")
                return
            }
            guard let prettyJsonData = try? JSONSerialization.data(withJSONObject: jsonObject, options: .prettyPrinted) else {
                print("Error: Cannot convert JSON object to Pretty JSON data")
                return
            }
            guard let prettyPrintedJson = String(data: prettyJsonData, encoding: .utf8) else {
                print("Error: Could print JSON in String")
                return
            }
            print("prettyJsonData = \(prettyPrintedJson)")
            completion(response.data,response.response,response.error)
        } catch {
            print("Error: Trying to convert JSON data to string")
            return
        }
    case .failure(let error):
        print(error)
    }
}


</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>D06155D3-2E67-4F0C-B58E-059D39936BBB</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>alamofire</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
