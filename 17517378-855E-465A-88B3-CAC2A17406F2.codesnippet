<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//MARK: - future using URLSession.shared.dataTask
//VC
var observers : [AnyCancellable] = []
let ViewModel = ProductVM()
///.receive(on: DispatchQueue.main)  -&gt; put receive data in main queue directly
///.sink  -&gt; mange bindingData
ViewModel.fetchData().receive(on: DispatchQueue.main).sink(receiveCompletion: { Completion in
        switch Completion{
        case .finished:
            print("finshed recive")
        case .failure(let error):
            print(error)
        }
    }, receiveValue: { value in
        self.arrayOfproducts = value
        self.productsTable.reloadData()
    }).store(in: &amp;observers)

//VM
func fetchData(searchkey:String)-&gt; Future&lt;[Complaint],Error&gt;{
    return Future { data in
        ///api calling
        ///success
        data(.success(products))
        ///fail
        data(.failure(error!))
    }
}


//in networkManger
func networkPost(completion: @escaping ([Complaint]?, Error?) -&gt; (),searchkey:String){
    guard let url = URL(string: Url.shared.baseURL) else {return}
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    // request.httpShouldHandleCookies = false
    let postString = "indexFrom=1&amp;indexTo=10&amp;serchKey=\(searchkey)";
    request.httpBody = postString.data(using: String.Encoding.utf8);
    let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
        
        guard let data = data,let response = response as? HTTPURLResponse,error == nil
        else {
            ///networking error
            print("error", error ?? URLError(.badServerResponse))
            return
        }
        guard (200 ... 299) ~= response.statusCode else {                    
            ///check for http errors
            print("statusCode should be 2xx, but is \(response.statusCode)")
            print("response = \(response)")
            return
        }
        
        do {
            let responseObject = try JSONDecoder().decode(Posts.self, from: data)
            let productArray = responseObject.complaints
            DispatchQueue.main.async{
                completion(productArray,nil)
            }
        }
        catch {
            print(error)
            DispatchQueue.main.async{
                completion(nil,error)///parsing error
            }
            if let responseString = String(data: data, encoding: .utf8) {
                print("responseString = \(responseString)")
            } else {
                print("unable to parse response as string")
            }
        }
    }
    task.resume()
}

//MARK: - future using dataTaskPublisher

protocol NetworkServiceProtocol {
    func request&lt;T: Decodable&gt;(url: String, decodeType: T.Type) -&gt; Future&lt;T, Error&gt;
}

final class NetworkService: NetworkServiceProtocol {

    private var cancellables = Set&lt;AnyCancellable&gt;()

    func request&lt;T: Decodable&gt;(url: String, modelType: T.Type) -&gt; Future&lt;T, Error&gt; {
        return Future&lt;T, Error&gt; { [weak self] promise in
            guard let self = self,
                  let url = URL(string: url) else {
                return promise(.failure(NetworkError.invalidURL))
            }
            let configuration = URLSessionConfiguration.default
            configuration.timeoutIntervalForResource = 60.0 // 60 seconds
            let session = URLSession(configuration: configuration)
            session.dataTaskPublisher(for: url)
                .tryMap { (data, response) -&gt; Data in
                    guard (response as? HTTPURLResponse)?.statusCode == 200 else { throw NetworkError.invalidResponse }
                    return data
                }
                .decode(type: modelType.self, decoder: JSONDecoder())
                .receive(on: RunLoop.main)
                .sink { completion in
                    switch completion{
                        case .finished:
                            print("finshed recive")
                        case .failure(let error):
                        promise(.failure(error))
                    }
                } receiveValue: { receiveValue in
                    promise(.success(receiveValue))
                }
                .store(in: &amp;self.cancellables)
        }
    }

}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>17517378-855E-465A-88B3-CAC2A17406F2</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Futur combine</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
