<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import SwiftUI
import CodeScanner
//import AVFoundation


//ex 1
struct CodeScanView: View {
    @EnvironmentObject var VM : SearchVM
    @Environment(\.dismiss) var dismiss
    @State var animted = false

    var body: some View {
        CodeScannerView(codeTypes: [.qr,.code39,.code93,.code128,.ean8,.ean13,.upce,.itf14],
                        completion:self.handleScan )
        .overlay(
            ZStack {
                Rectangle()
                    .fill(Color.black.opacity(0.5))
                    .edgesIgnoringSafeArea(.all)
                Rectangle()
                    .stroke(Color.yellow, lineWidth: 2)
                    .frame(width: 200,height: 200)
                    .scaleEffect(animted ?  1.2 : 1)
            }
        )
        .onAppear {
            addanimtion()
        }
    }
    func addanimtion(){
        withAnimation(Animation.easeOut(duration: 1.0).repeatForever()) {
            animted.toggle()
        }
    }
    func handleScan(result: Result&lt;ScanResult, ScanError&gt;) {
            self.animted = false

            switch result {
            case .success(let res):
                VM.scanData = res.string
                dismiss()
            case .failure(_):
                VM.scanData = nil
                dismiss()
            }
        }
}


//ex 2
/*
struct CodeScanView: View {
    @State private var scannedCode = ""

    var body: some View {
        VStack {
            Text("Scanned code: \(scannedCode)")

            CodeScannerView(codeTypes: [.qr,.code39,.code93,.code128,.ean8,.ean13,.upce,.itf14], simulatedData: "Some simulated data", completion: self.handleScan)
        }
    }

    func handleScan(result: Result&lt;String, CodeScannerView.ScanError&gt;) {
        switch result {
        case .success(let code):
            self.scannedCode = code
        case .failure(let error):
            print(error.localizedDescription)
        }
    }
}

struct CodeScannerView: UIViewControllerRepresentable {
    
    let codeTypes: [AVMetadataObject.ObjectType]
    let simulatedData: String?
    let completion: (Result&lt;String, ScanError&gt;) -&gt; Void

    func makeUIViewController(context: Context) -&gt; UIViewController {
        let viewController = UIViewController()
        let captureSession = AVCaptureSession()

        guard let videoCaptureDevice = AVCaptureDevice.default(for: .video) else { return viewController }

        guard let videoInput = try? AVCaptureDeviceInput(device: videoCaptureDevice) else { return viewController }

        if captureSession.canAddInput(videoInput) {
            captureSession.addInput(videoInput)
        } else {
            completion(.failure(.invalidDeviceInput))
            return viewController
        }

        let metadataOutput = AVCaptureMetadataOutput()

        if captureSession.canAddOutput(metadataOutput) {
            captureSession.addOutput(metadataOutput)

            metadataOutput.setMetadataObjectsDelegate(context.coordinator, queue: DispatchQueue.main)
            metadataOutput.metadataObjectTypes = codeTypes
        } else {
            completion(.failure(.invalidMetadataOutput))
            return viewController
        }

        let previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
        previewLayer.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height)

        viewController.view.layer.addSublayer(previewLayer)

        context.coordinator.captureSession = captureSession
        context.coordinator.completion = completion

        return viewController
    }

    func updateUIViewController(_ uiViewController: UIViewController, context: Context) {}

    func makeCoordinator() -&gt; Coordinator {
        Coordinator(codeTypes: codeTypes, simulatedData: simulatedData, completion: completion)
    }

    class Coordinator: NSObject, AVCaptureMetadataOutputObjectsDelegate {
        var captureSession: AVCaptureSession?
        var completion: ((Result&lt;String, ScanError&gt;) -&gt; Void)?

        init(codeTypes: [AVMetadataObject.ObjectType], simulatedData: String?, completion: @escaping (Result&lt;String, ScanError&gt;) -&gt; Void) {
            super.init()

            self.completion = completion

            if let simulatedData = simulatedData {
                found(codeString: simulatedData)
            }
        }
        
        func found(codeString: String) {
            guard let completion = completion else { return }

            AudioServicesPlaySystemSound(SystemSoundID(kSystemSoundID_Vibrate))

            DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
                self?.captureSession?.startRunning()
                completion(.success(codeString))
            }
        }

        func metadataOutput(_ output: AVCaptureMetadataOutput, didOutput metadataObjects: [AVMetadataObject], from connection: AVCaptureConnection) {
            guard let metadataObject = metadataObjects.first else { return }

            guard let readableObject = metadataObject as? AVMetadataMachineReadableCodeObject else { return }

            guard let stringValue = readableObject.stringValue else { return }

            found(codeString: stringValue)
        }
    }

    enum ScanError: Error {
        case invalidDeviceInput
        case invalidMetadataOutput
    }
}
*/

//ex3
/*
struct CodeScanView: View {
    @ObservedObject var viewModel = ScannerViewModel()
    var body: some View {
       ZStack {
            Text("Scanner goes here...")
        
            VStack {
                VStack {
                    Text("Keep scanning for QR-codes")
                        .font(.subheadline)
                    Text(self.viewModel.lastQrCode)
                        .bold()
                        .lineLimit(5)
                        .padding()
                }
                .padding(.vertical, 20)
                
                Spacer()
                
                HStack {
                    Button(action: {
                        self.viewModel.torchIsOn.toggle()
                    },label: {
                        Image(systemName: self.viewModel.torchIsOn ? "bolt.fill" : "bolt.slash.fill")
                            .imageScale(.large)
                            .foregroundColor(self.viewModel.torchIsOn ? Color.yellow : Color.blue)
                            .padding()
                    })
                }
                .background(Color.white)
                .cornerRadius(10)
                
            }.padding()
        }
        
    }
}

class ScannerViewModel: ObservableObject {
    
    /// Defines how often we are going to try looking for a new QR-code in the camera feed.
    let scanInterval: Double = 1.0
    
    @Published var torchIsOn: Bool = false
    @Published var lastQrCode: String = "Qr-code goes here"
    
    
    func onFoundQrCode(_ code: String) {
        self.lastQrCode = code
    }
}

class QrCodeCameraDelegate: NSObject, AVCaptureMetadataOutputObjectsDelegate {
    
    var scanInterval: Double = 1.0
    var lastTime = Date(timeIntervalSince1970: 0)
    
    var onResult: (String) -&gt; Void = { _  in }
    var mockData: String?
    
    func metadataOutput(_ output: AVCaptureMetadataOutput, didOutput metadataObjects: [AVMetadataObject], from connection: AVCaptureConnection) {
        if let metadataObject = metadataObjects.first {
            guard let readableObject = metadataObject as? AVMetadataMachineReadableCodeObject else { return }
            guard let stringValue = readableObject.stringValue else { return }
            foundBarcode(stringValue)
        }
    }
    
    @objc func onSimulateScanning(){
        foundBarcode(mockData ?? "Simulated QR-code result.")
    }
    
    func foundBarcode(_ stringValue: String) {
        let now = Date()
        if now.timeIntervalSince(lastTime) &gt;= scanInterval {
            lastTime = now
            self.onResult(stringValue)
        }
    }
}

class CameraPreview: UIView {
    
    private var label:UILabel?
    
    var previewLayer: AVCaptureVideoPreviewLayer?
    var session = AVCaptureSession()
    weak var delegate: QrCodeCameraDelegate?
    
    init(session: AVCaptureSession) {
        super.init(frame: .zero)
        self.session = session
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func createSimulatorView(delegate: QrCodeCameraDelegate){
        self.delegate = delegate
        self.backgroundColor = UIColor.black
        label = UILabel(frame: self.bounds)
        label?.numberOfLines = 4
        label?.text = "Click here to simulate scan"
        label?.textColor = UIColor.white
        label?.textAlignment = .center
        if let label = label {
            addSubview(label)
        }
        let gesture = UITapGestureRecognizer(target: self, action: #selector(onClick))
        self.addGestureRecognizer(gesture)
    }
    
    @objc func onClick(){
        delegate?.onSimulateScanning()
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        #if targetEnvironment(simulator)
            label?.frame = self.bounds
        #else
            previewLayer?.frame = self.bounds
        #endif
    }
}

struct QrCodeScannerView: UIViewRepresentable {
    
    var supportedBarcodeTypes: [AVMetadataObject.ObjectType] = [.qr]
    typealias UIViewType = CameraPreview
    
    private let session = AVCaptureSession()
    private let delegate = QrCodeCameraDelegate()
    private let metadataOutput = AVCaptureMetadataOutput()
    
    
    func torchLight(isOn: Bool) -&gt; QrCodeScannerView {
        if let backCamera = AVCaptureDevice.default(for: AVMediaType.video) {
            if backCamera.hasTorch {
                try? backCamera.lockForConfiguration()
                if isOn {
                    backCamera.torchMode = .on
                } else {
                    backCamera.torchMode = .off
                }
                backCamera.unlockForConfiguration()
            }
        }
        return self
    }
    
    func interval(delay: Double) -&gt; QrCodeScannerView {
        delegate.scanInterval = delay
        return self
    }
    
    func found(r: @escaping (String) -&gt; Void) -&gt; QrCodeScannerView {
        delegate.onResult = r
        return self
    }
    
    func simulator(mockBarCode: String)-&gt; QrCodeScannerView{
        delegate.mockData = mockBarCode
        return self
    }
    
    func setupCamera(_ uiView: CameraPreview) {
        if let backCamera = AVCaptureDevice.default(for: AVMediaType.video) {
            if let input = try? AVCaptureDeviceInput(device: backCamera) {
                session.sessionPreset = .photo
                
                if session.canAddInput(input) {
                    session.addInput(input)
                }
                if session.canAddOutput(metadataOutput) {
                    session.addOutput(metadataOutput)
                    
                    metadataOutput.metadataObjectTypes = supportedBarcodeTypes
                    metadataOutput.setMetadataObjectsDelegate(delegate, queue: DispatchQueue.main)
                }
                let previewLayer = AVCaptureVideoPreviewLayer(session: session)
                
                uiView.backgroundColor = UIColor.gray
                previewLayer.videoGravity = .resizeAspectFill
                uiView.layer.addSublayer(previewLayer)
                uiView.previewLayer = previewLayer
                
                session.startRunning()
            }
        }
        
    }
    
    func makeUIView(context: UIViewRepresentableContext&lt;QrCodeScannerView&gt;) -&gt; QrCodeScannerView.UIViewType {
        let cameraView = CameraPreview(session: session)
        
        #if targetEnvironment(simulator)
        cameraView.createSimulatorView(delegate: self.delegate)
        #else
        checkCameraAuthorizationStatus(cameraView)
        #endif
        
        return cameraView
    }
    
    static func dismantleUIView(_ uiView: CameraPreview, coordinator: ()) {
        uiView.session.stopRunning()
    }
    
    private func checkCameraAuthorizationStatus(_ uiView: CameraPreview) {
        let cameraAuthorizationStatus = AVCaptureDevice.authorizationStatus(for: .video)
        if cameraAuthorizationStatus == .authorized {
            setupCamera(uiView)
        } else {
            AVCaptureDevice.requestAccess(for: .video) { granted in
                DispatchQueue.main.sync {
                    if granted {
                        self.setupCamera(uiView)
                    }
                }
            }
        }
    }
    
    func updateUIView(_ uiView: CameraPreview, context: UIViewRepresentableContext&lt;QrCodeScannerView&gt;) {
        uiView.setContentHuggingPriority(.defaultHigh, for: .vertical)
        uiView.setContentHuggingPriority(.defaultLow, for: .horizontal)
    }
    
}
*/

//EX4
/*
struct CodeScanView: View {
    @State private var isAnimating = false
    @State private var isShowingScanner = false
    
    var body: some View {
        ZStack {
            Color.yellow
                .scaleEffect(isAnimating ? 1.5 : 1.0)
                .animation(.easeInOut(duration: 1.0))
            Text("Scan Code Here")
                .foregroundColor(.white)
        }
        .onAppear() {
            self.isAnimating = true
        }
        .sheet(isPresented: $isShowingScanner) {
            ScannerView(codeTypes: [.qr], completion: self.handleScan)
        }
    }
    
    func handleScan(result: Result&lt;String, Error&gt;) {
        self.isShowingScanner = false
        
        switch result {
        case .success(let code):
            print("Scanned code: \(code)")
        case .failure(let error):
            print("Scanning failed with error: \(error.localizedDescription)")
        }
    }
}

struct ScannerView: UIViewControllerRepresentable {
    var codeTypes: [AVMetadataObject.ObjectType]
    var completion: (Result&lt;String, Error&gt;) -&gt; Void
    
    func makeUIViewController(context: UIViewControllerRepresentableContext&lt;ScannerView&gt;) -&gt; ScannerViewController {
        let scannerViewController = ScannerViewController()
        scannerViewController.codeTypes = codeTypes
        scannerViewController.completion = completion
        
        return scannerViewController
    }
    
    func updateUIViewController(_ uiViewController: ScannerViewController, context: UIViewControllerRepresentableContext&lt;ScannerView&gt;) {}
}

class ScannerViewController: UIViewController, AVCaptureMetadataOutputObjectsDelegate {
    var captureSession = AVCaptureSession()
    var previewLayer: AVCaptureVideoPreviewLayer!
    var codeTypes = [AVMetadataObject.ObjectType]()
    var completion: ((Result&lt;String, Error&gt;) -&gt; Void)?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = UIColor.black
        
        guard let captureDevice = AVCaptureDevice.default(for: .video) else { return }
        
        do {
            let input = try AVCaptureDeviceInput(device: captureDevice)
            captureSession.addInput(input)
            
            let output = AVCaptureMetadataOutput()
            captureSession.addOutput(output)
            
            output.setMetadataObjectsDelegate(self, queue: DispatchQueue.main)
            output.metadataObjectTypes = codeTypes
            
            previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
            previewLayer.frame = view.layer.bounds
            previewLayer.videoGravity = .resizeAspectFill
            view.layer.addSublayer(previewLayer)
            
            captureSession.startRunning()
        } catch {
            print(error.localizedDescription)
        }
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        if captureSession.isRunning {
            captureSession.stopRunning()
        }
    }
    
    func metadataOutput(_ output: AVCaptureMetadataOutput, didOutput metadataObjects: [AVMetadataObject], from connection: AVCaptureConnection) {
        guard let metadataObject = metadataObjects.first else { return }
        
        guard let readableObject = metadataObject as? AVMetadataMachineReadableCodeObject else { return }
        
        guard let stringValue = readableObject.stringValue else { return }
        
        AudioServicesPlaySystemSound(SystemSoundID(kSystemSoundID_Vibrate))
        
        captureSession.stopRunning()
        
        completion?(.success(stringValue))
    }
}
*/



struct CodeScannerView_Previews: PreviewProvider {
    static var previews: some View {
        CodeScanView()
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>10203FD7-6C39-4659-BA24-9F3A4CB88084</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string> SwiftUi CodeScanner</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
