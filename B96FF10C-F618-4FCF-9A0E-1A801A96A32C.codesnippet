<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//
//  DBManger.swift
//  SportsApp
//
//  Created by Ahmed Hussien on 23/11/1443 AH.
//

import Foundation
import CoreData

class DBManager{
    static let sharedInstance = DBManager()
     init(){}
}
extension DBManager{
    
    func addLeague(appDelegate: AppDelegate,id: String, name: String, sport: String, alternate: String,image: String,youtube: String){
        let managedContext = appDelegate.persistentContainer.viewContext

        //if there is an entity called "Movie" then a value returns otherwise, it would be nil
        if let entity = NSEntityDescription.entity(forEntityName: "CoreLeague", in: managedContext){

            let CoreLeague = NSManagedObject(entity: entity, insertInto: managedContext)
            CoreLeague.setValue(id, forKey: "id")
            CoreLeague.setValue(name, forKey: "name")
            CoreLeague.setValue(sport, forKey: "sport")
            CoreLeague.setValue(alternate, forKey: "alternate")
            CoreLeague.setValue(image, forKey: "image")
            CoreLeague.setValue(youtube, forKey: "youtube")
            do {
                try managedContext.save()
                print(" sucss add")
            }catch let error as NSError {
                print("Error in saving")
                print(error.localizedDescription)
            }
        }
    }

    func fetchData(appDelegate: AppDelegate) -&gt; [CoreLeague]{

        var fetchedList : [CoreLeague] = []
        let managedContext = appDelegate.persistentContainer.viewContext
        let fetchRequest = NSFetchRequest&lt;NSManagedObject&gt;(entityName: "CoreLeague")
//        let predicate = NSPredicate(format: "title == %@", "SpiderMan")
//        fetchRequest.predicate = predicate
        do{
            fetchedList = try managedContext.fetch(fetchRequest) as! [CoreLeague]
            print("sucss fetch")
        }catch let error as NSError {
            print("Error in saving")
            print(error.localizedDescription)
        }
        return fetchedList
    }

    func delete(CoreLeague:CoreLeague, appDelegate: AppDelegate){
    
        let managedContext = appDelegate.persistentContainer.viewContext
        managedContext.delete(CoreLeague)
        do{
            try managedContext.save()
           // delegate.deleteMovieAtIndexPath(indexPath: indexPath)
            print("deleted")
        }catch let error as NSError{
            print("Error in saving")
            print(error.localizedDescription)
        }

    }
}



// predicate quary
let predicate  = NSPredicate(format: "title CONTAINS[cd] %@",selectedCategory!.name!)
let categoryPredicate = NSPredicate(format: "parent.name MATCHES %@",selectedCategory!.name!)
let compoundPredicate =  NSCompoundPredicate(andPredicateWithSubpredicates: [categoryPredicate,predicate])
       
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>B96FF10C-F618-4FCF-9A0E-1A801A96A32C</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>core data singleton</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
