<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//MARK: urlSession.shared.dataTaskPiblisher combine in 
//view
let ProductViewModel = ProductVM()
ProductViewModel.fetchData2 { value, error in
    self.arrayOfproducts = value!
    self.productsTable.reloadData()
}
//vm
@Published var allvalue : Model?
private var cancellables = Set&lt;AnyCancellable&gt;()
func fetchData2(){
    apiService.networkPostWithCombine.sink {Completion in
        switch Completion{
            case .finished:
                print("finshed recive")
            case .failure(let error):
                print(error)
        }
    } receiveValue: { value in
        allvalue = value
    }
}
//network
class NetworkManager{
    
    private var cancellables = Set&lt;AnyCancellable&gt;()
    
    func getAll() -&gt; AnyPublisher&lt;User, Error&gt; {
        
        guard let url = Url.shared.getAllUsers() else {return Fail(error: URLError(.badURL)).eraseToAnyPublisher()}
        
        var request = URLRequest(url: url)
        request.allHTTPHeaderFields = Url.shared.param
        
        return URLSession.shared.dataTaskPublisher(for: request)
            .map(\.data)
            .decode(type: User.self, decoder: JSONDecoder())
            .receive(on: DispatchQueue.main)
            .eraseToAnyPublisher()
    }
    
}



//network  checkNameAvailable
struct NetworkService {
    func checkNameAvailable(name: String) -&gt; AnyPublisher&lt;Bool, Never&gt; {
        guard let url = URL(string: "http://127.0.0.1:8080/isNameValid?name=\(name)") else {
            return Just(false).eraseToAnyPublisher()
        }
        return URLSession.shared.dataTaskPublisher(for: url)
            .map(\.data)
            .decode(type: NameAvailableMessage.self,
                    decoder: JSONDecoder())
            .map(\.isAvailable)
            .replaceError(with: false)
            .eraseToAnyPublisher()
    }
}


//MARK: - PassthroughSubject

class Counter {
    let publisher = PassthroughSubject&lt;Int, Never&gt;()
    private(set) var value = 0 {
        // Whenever our property was set, we send its new value
        // to our subject/publisher:
        didSet { publisher.send(value) }
    }
    func increment() {
        value += 1
    }
}

//used
let counter = Counter()
let cancellable = counter.publisher
    .filter { $0 &gt; 2 }
    .sink { value in
        print(value)
    }
/// Since we're filtering out all values below 3, only our final
/// increment call will result in a value being printed:
counter.increment()
///
counter.publisher.send(17)


//MARK: -  swiftui combine Subscriber on TextField
@Published var textFieldText: String = ""
@Published var textIsValid: Bool = false

init () {
addTextFieldSubscriber ()
}

func addTextFieldSubscriber() {
    $textFieldText
      ///debounce usede in texte filed
        .debounce(for: 0.8, scheduler: RunLoop.main)
        .removeDuplicates()
        .map { (text) -&gt; Bool in
            if text.count &gt; 3 {
                return true
            }
            else
                return false
        }
        .assign(to: \.textisValid, on: self)
        /// assign ==  sink
        .sink(receiveValue: { [weak self] (isValid) in
            self.textIsValid = isValid
        })
        .store(in: &amp;cancellables)
}

//MARK: - Ex2 Form validation
{
    class UserViewModel: ObservableObject {
  // Input
  @Published var username = ""
  @Published var password = ""
  @Published var passwordAgain = ""
  @Published var usernameMessage = ""
  @Published var passwordMessage = ""

  // Output
  @Published var isValid = false
  var cancellable : [AnyCancellable] = []
    
    init(){
        formValidation()
        hintMessage()
    }

    
    //Username validation
    private var isUsernameValidPublisher: AnyPublisher&lt;Bool, Never&gt; {
        $username
          .debounce(for: 0.8, scheduler: RunLoop.main)
          .removeDuplicates()
          .map { input in
            return input.count &gt;= 3
          }
          .eraseToAnyPublisher()
      }
    
    //password validation
    private var isPasswordEmptyPublisher: AnyPublisher&lt;Bool, Never&gt; {
        $password
          .debounce(for: 0.5, scheduler: RunLoop.main)
          .removeDuplicates()
          .map { password in
            return password == ""
          }
          .eraseToAnyPublisher()
      }
    private var arePasswordsEqualPublisher : AnyPublisher&lt;Bool,Never&gt;{
        Publishers.CombineLatest($password, $passwordAgain)
            .debounce(for: 0.5, scheduler: RunLoop.main)
            .map{ password, passwordAgain in
                return password == passwordAgain
            }.eraseToAnyPublisher()
    }
    enum PasswordCheck {
       case valid
       case empty
       case noMatch
       case notStrongEnough
     }
    private var isPasswordValidPublisher: AnyPublisher&lt;PasswordCheck, Never&gt; {
        Publishers.CombineLatest(isPasswordEmptyPublisher,arePasswordsEqualPublisher)
            .map { passwordIsEmpty, passwordsAreEqual in
                if (passwordIsEmpty) {
                    return .empty
                }
                else if (!passwordsAreEqual) {
                    return .noMatch
                }
                else {
                    return .valid
                }
            }
            .eraseToAnyPublisher()
    }
      
    //final validation
    private var isFormValidPublisher: AnyPublisher&lt;Bool, Never&gt; {
        Publishers.CombineLatest(isUsernameValidPublisher, isPasswordValidPublisher)
          .map { usernameIsValid, passwordIsValid in
            return usernameIsValid &amp;&amp; (passwordIsValid == .valid)
          }
        .eraseToAnyPublisher()
      }
   
    func hintMessage(){
        isUsernameValidPublisher
            .receive(on: RunLoop.main)
            .map { valid in
                valid ? "" : "username must at leat have 3 characters"
            }
            .assign(to: \.usernameMessage, on: self)
            .store(in: &amp;cancellable)
        
        isPasswordValidPublisher
            .receive(on: RunLoop.main)
            .map { passwordCheck in
                switch passwordCheck {
                case .empty:
                    return "Password must not be empty"
                case .noMatch:
                    return "Passwords don't match"
                default:
                    return ""
                }
            }
            .assign(to: \.passwordMessage, on: self)
            .store(in: &amp;cancellable)
    }
    
    func formValidation(){
        isFormValidPublisher
            .receive(on: RunLoop.main)
            .assign(to: \.isValid,on: self)
            .store(in: &amp;cancellable)
    }

    
        
}

struct ContentView: View {
    @ObservedObject private var userViewModel = UserViewModel()
    var body: some View {
        Form(content: {
            Section (footer: Text(userViewModel.usernameMessage).foregroundColor(.red)){
                TextField("Username", text: $userViewModel.username)
                    .autocapitalization(.none)
            }
            Section(footer: Text(userViewModel.passwordMessage).foregroundColor(.red)){
                SecureField("Password", text: $userViewModel.password)
                SecureField("Password again", text: $userViewModel.passwordAgain)
            }
             Section {
                Button {
                    print("")
                } label: {
                    Text("Sign up")
                }.disabled(!userViewModel.isValid)

            }
        })
      }

}
}

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>D69F359C-4FA5-4A26-9BC3-5ABFF11D9FD2</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>combine</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
