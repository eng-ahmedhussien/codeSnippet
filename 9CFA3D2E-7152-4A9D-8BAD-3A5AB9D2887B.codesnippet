<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//
//  UIview extension.swift
//  Chat_App
//
//  Created by Ahmed Hussien on 15/08/2022.
//

import UIKit

@IBDesignable
class DesignableView: UIView {
}
@IBDesignable
class DesignableButton: UIButton {
}
@IBDesignable
class DesignableLabel: UILabel {
}
@IBDesignable
class DesignableTextField: UITextField {
}
@IBDesignable
class DesignableTUITextView: UITextView {
}
@IBDesignable
class DesignableTableView: UITableView {
}
@IBDesignable
class DesignableTableViewCell: UITableViewCell {
}
@IBDesignable
class DesignableCollectionView: UICollectionView {
}
@IBDesignable
class DesignableCollectionViewCell: UICollectionViewCell {
}
@IBDesignable
class DesignableUIImageView: UIImageView{
}
//MARK: Solutions To Common Problems Shadows And Rounded Corners At The Same Time
//@IBInspectable override var clipsToBounds : Bool {
//         didSet {
//             clipsToBounds = clipsToBounds ? true : false
//         }
//     }

extension UIView {
    
    @IBInspectable
    var cornerRadius: CGFloat {
        get {
            return layer.cornerRadius
        }
        set {
            layer.cornerRadius = newValue
            layer.masksToBounds = (newValue &gt; 0)
        }
    }
    
    // Circle viet
    @IBInspectable
    var isCircle: Bool {
        set {
            layer.cornerRadius = self.frame.size.width / 2
        }
        get {
            return self.isCircle
        }
    }

    @IBInspectable
    var borderWidth: CGFloat {
        get {
            return layer.borderWidth
        }
        set {
            layer.borderWidth = newValue
        }
    }
    
    @IBInspectable
    var borderColor: UIColor? {
        get {
            guard let cgColor = layer.borderColor else {return nil}
            return UIColor(cgColor: cgColor)
        }
        set { layer.borderColor  = newValue?.cgColor }
    }
    
    @IBInspectable
    var shadowRadius: CGFloat {
        get { return layer.shadowRadius }
        set { layer.shadowRadius = newValue }
    }
    
    @IBInspectable
    var shadowOpacity: Float {
        get {
            return layer.shadowOpacity
        }
        set {
            layer.shadowOpacity = newValue
        }
    }
    
    @IBInspectable
    var shadowOffset: CGSize {
        get { return layer.shadowOffset }
        set { layer.shadowOffset = newValue }
    }
    
    @IBInspectable
    var shadowColor: UIColor? {
        get {
            guard let cgColor = layer.shadowColor else {
                return nil
            }
            return UIColor(cgColor: cgColor)
        }
        set { layer.shadowColor = newValue?.cgColor }
    }

    @IBInspectable
    var masksToBounds: Bool {
        get {return layer.masksToBounds }
            
        
        set { layer.masksToBounds = newValue }
    
}
}





   




</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>9CFA3D2E-7152-4A9D-8BAD-3A5AB9D2887B</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>extension UIView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
