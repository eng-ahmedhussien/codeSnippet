<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>Alamofire.request(url).responseJSON { response in
    switch response.result {
        case .success( _):
            guard let data = response.data else{return}
            do {
                let decodedData = try JSONDecoder().decode(AllSports.self, from:data)
                completion(decodedData.sports,nil)
            } catch let jsonError {
                completion(nil,jsonError)
            }

        case .failure(let error):
            completion(nil,error)
    }

}

Alamofire.request(url).validate().responseJSON { response in
    switch response.result {
        case .success( _):
            guard let data = response.data else{return}
            do {
                let decodedData = try JSONDecoder().decode(AllSports.self, from:data)
                completion(decodedData.sports,nil)
            } catch let jsonError {
                completion(nil,jsonError)
            }
            
        case .failure(let error):
            completion(nil,error)
    }
    
}
}

func getAllBrands(complition: @escaping (BrandsModel?, Error?)-&gt;Void){
    
    guard let url = URLs.shared.getAllBrandsURl() else {return}
    AF.request(url, method: .get, parameters: nil, encoding: JSONEncoding.default, headers: nil).response { res in
        switch res.result{
        case .failure(let error):
            complition(nil, error)
        case .success(_):
            guard let data = res.data else { return }
            do{
                let json = try JSONDecoder().decode(BrandsModel.self, from: data)
                complition(json, nil)
                print("success to get all brands")
            }catch let error{
                print("error when get All brands")
                complition(nil, error)
            }
        }
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>17720122-B549-4F53-8F4A-97A8336E69DD</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>date piker</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
