<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//
//  CustomTabBar.swift
//  Pizza_app
//
//  Created by Ahmed Hussien on 21/03/2023.
//

import Foundation
import UIKit

@IBDesignable
class CustomTabBar: UITabBar {
    private var shapeLayer: CALayer?
    
    override func draw(_ rect: CGRect) {
        self.addShape ()
    }
    private func addShape () {
        let shapeLayer = CAShapeLayer ()
        shapeLayer.path = createPath ()
        shapeLayer.strokeColor = UIColor.lightGray.cgColor
        shapeLayer.fillColor = UIColor.white.cgColor
        shapeLayer.lineWidth = 1.0
        
        if let oldShapeLayer = self.shapeLayer {
            self.layer.replaceSublayer(oldShapeLayer, with: shapeLayer)
        } else {
            self.layer.insertSublayer(shapeLayer, at: 0)
        }
        self.shapeLayer = shapeLayer
    }
    
    //MARK: caurve tabbar button
    func createPath () -&gt; CGPath {
        let height: CGFloat = 37.0
        let path = UIBezierPath( )
        let centerWidth = self.frame.width / 2
        
        path.move (to: CGPoint(x: 0, y: 0)) // start top left
        path.addLine (to: CGPoint(x: (centerWidth - height * 2), y: 0)) // the beginning of the trough
        
        // first curve down
        path.addCurve (to: CGPoint(x: centerWidth, y: height),
                       controlPoint1: CGPoint(x: (centerWidth - 30), y: 0), controlPoint2: CGPoint(x: centerWidth - 35, y: height))
        // second curve up
        path.addCurve (to: CGPoint (x: (centerWidth + height * 2), y: 0) ,
                        controlPoint1: CGPoint (x: centerWidth + 35, y: height), controlPoint2: CGPoint (x: (centerWidth + 30), y: 0))
        // complete the rect
        path.addLine (to: CGPoint(x: self.frame.width, y: 0))
        path.addLine (to: CGPoint(x: self.frame.width, y: self.frame.height))
        path.addLine (to: CGPoint(x: 0, y: self.frame.height))
        path.close()
        
        return path.cgPath
    }
    //MARK: Circle tabbar button
    func createPathCircle () -&gt; CGPath {
        let radius: CGFloat = 37.0
        let path = UIBezierPath()
        let centerWidth = self.frame.width / 2
        
        path.move(to: CGPoint(x: 0, y: 0))
        path.addLine (to: CGPoint(x: (centerWidth - radius * 2), y: 0))
        path.addArc (withCenter: CGPoint(x: centerWidth, y: 0), radius: radius, startAngle:
                        CGFloat (180).degreesToRadians, endAngle: CGFloat (0).degreesToRadians, clockwise: false)
        path.addLine (to: CGPoint (x: self.frame.width, y: 0))
        path.addLine (to: CGPoint (x: self.frame.width, y: self.frame .height))
        path.addLine (to: CGPoint(x: 0, y: self.frame.height))
        path.close ()
        
        return path.cgPath
    }
    
    override func point(inside point: CGPoint, with event: UIEvent?) -&gt; Bool {
        let buttonRadius: CGFloat = 0//35
        return abs(self.center.x - point.x) &gt; buttonRadius || abs(point.y) &gt; buttonRadius
    }
    }
extension CGFloat {
    var degreesToRadians: CGFloat { return self * .pi / 180 }
    var radiansToDegrees: CGFloat { return self * 180 / .pi}
}

    



</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>51E654B5-A080-4E11-A440-F8A2FF370425</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>  custom tabBar</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
