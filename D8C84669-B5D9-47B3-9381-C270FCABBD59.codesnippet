<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import Foundation
import UIKit

//MARK: -  Coordinator
class AppCoordinator{
    let window: UIWindow
    var mainNavigator : MainNavigator
    
    init(window: UIWindow = UIWindow()) {
        self.window = window
        self.mainNavigator = .init()
    }
    //call in AppDelegate
    func start(){
        window.rootViewController = rootViewController
        window.makeKeyAndVisible()
    }
    
    var rootViewController : UIViewController{
        return CustomTablBarController(coordinator: self)
    }
}

//MARK: -  protocol Navigator
enum navigatorType{
    case push
    case present
    case root
}

protocol Navigator{
    associatedtype Destination
    func navigate(to destination: Destination,with type: navigatorType)
    func makeViewController(for destination: Destination) -&gt; UIViewController
    var coordinator : AppCoordinator {get}
    init(coordinator:AppCoordinator)
}
extension Navigator {
    // default navigation type is .push
    public func navigate(to destination: Destination,with type: navigatorType = .push) {
        let viewController = self.makeViewController(for: destination)
        switch type {
        case .push:
            coordinator.navigationController?.pushViewController(viewController,animated:true)
        case .present:
            coordinator.navigationController?.present (viewController, animated: true)
        case .root:
            coordinator .navigationController?.setViewControllers([viewController], animated: true)
        }
    }
}

//MARK: -  MainNavigator
class MainNavigator : Navigator{
   
    var coordinator: AppCoordinator
    
    required init(coordinator: AppCoordinator) {
        self.coordinator = coordinator
    }
    
    enum Destination{
        case Home
    }
    
    func makeViewController(for destination: Destination) -&gt; UIViewController {
        switch destination.self{
        case .Home :
            let vc = HomeVC(coordinator: coordinator)
          //  vc.coordinator  = coordinator
            return vc
        }
    }
}

//MARK:  - using cooedinator
class HomeVC: UIViewController {
    var coordinator: AppCoordinator
    init(coordinator:AppCoordinator){
        self.coordinator = coordinator
        super.init(nibName: "HomeVC", bundle: nil)
    }
}


class CustomTablBarController: UITabBarController {
    var coordinator: AppCoordinator
    
    init(coordinator: AppCoordinator) {
        self.coordinator = coordinator
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
}

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>D8C84669-B5D9-47B3-9381-C270FCABBD59</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Coordinator</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
