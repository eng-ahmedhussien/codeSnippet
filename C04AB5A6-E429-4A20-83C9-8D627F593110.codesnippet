<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>@IBOutlet weak var &lt;#CollectionView#&gt;: UICollectionView!{
    didSet{
        &lt;#CollectionView#&gt;.dataSource = self
        &lt;#CollectionView#&gt;.delegate = self
        
        //nib file 
        &lt;#CollectionView#&gt;.register(UINib(nibName: "ProductDetailsCollectionViewImageCell", bundle: .main), forCellWithReuseIdentifier: "ProductDetailsCollectionViewImageCell")
        
        //if using extention for collection view (genaric)
        sliderCollectionView.registerCell(cellClass:&lt;#cellClassName#&gt;.self)
    }
}

extension HomeVC:UICollectionViewDelegate,UICollectionViewDataSource{
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {
        return 3
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: string(describing:&lt;#cellClassName#&gt;.self), for: indexPath) as! CollectionViewCell
        //or 
        let cell =  collectionView.dequeueReusableCell(withReuseIdentifier: "statusCell", for: indexPath) as! collectionViewCell
        
        //if using extention for collection view (genaric)
        let cell = sliderCollectionView.dequeue(indexPath: indexPath) as &lt;#cellClassName#&gt;
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
         let cell =  collectionView.cellForItem(at: indexPath) as! OrderStatusCVCell
        cell.contentView.backgroundColor = #colorLiteral(red: 0.9551903605, green: 0.8229467273, blue: 0, alpha: 1)
        
    }
    
    func collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath) {
        let cell = collectionView.cellForItem(at: indexPath) as! OrderStatusCVCell
            cell.contentView.backgroundColor = .white
        }
    
   
}
//MARK: - UICollectionViewDelegateFlowLayout
extension HomeVC:UICollectionViewDelegateFlowLayout{
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; CGSize
    {
        let leftAndRightPaddings: CGFloat = 40
        let numberOfItemsPerRow: CGFloat = 2.0
        
        let width = (collectionView.frame.width-leftAndRightPaddings)/numberOfItemsPerRow
        return CGSize(width: width, height: width) 
        
        //make cell size = collection szie/2
        let width = collectionView.frame.size.width/2
        return CGSize(width: width, height: width)
        
        // make cell size equal full collection view
        return self.collectionViewCaht.frame.size
        
        //make cell size = collection szie
        return sliderCollectionView.bounds.size
    }
}

//MARK: - using scrollToItem to scroll to spasefic index

@IBAction func navagetButton(_ sender: UIButton) {
    let index = IndexPath(row: row, section: section)
    self.collectionViewCaht.scrollToItem(at: index, at: .centeredHorizontally, animated: true)
    
}
    
//MARK: - Cell UICollectionViewDelegateFlowLayout

extension CollectionViewCell:UICollectionViewDelegateFlowLayout{
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; CGSize {
        return CGSize(width: collectionView.frame.size.width / 2 , height: collectionView.frame.height)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -&gt; UIEdgeInsets {
        UIEdgeInsets(top: 5, left: 5, bottom: 5, right: 5)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -&gt; CGFloat {
        10
    }
}
//MARK: -  configureCellSize
//call it in viewdidload
func configureCellSize() {
    let flowLayout = self.collectionView.collectionViewLayout as? UICollectionViewFlowLayout
    flowLayout?.itemSize = CGSize(width: 100, height: 100)
    flowLayout?.itemSize = CGSize(width: self.collectionView.frame.size.width / 2 , height: self.collectionView.frame.height)
    flowLayout?.estimatedItemSize = .zero
    flowLayout?.minimumInteritemSpacing = 1
    flowLayout.sectionInset = UIEdgeInsets(top: &lt;#T##CGFloat#&gt;, left: &lt;#T##CGFloat#&gt;, bottom: &lt;#T##CGFloat#&gt;, right: &lt;#T##CGFloat#&gt;)
    }</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>C04AB5A6-E429-4A20-83C9-8D627F593110</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>collectionView setup</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
