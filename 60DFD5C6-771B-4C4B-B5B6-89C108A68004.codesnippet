<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//MARK: - send data in post
func register(newCustomer:NewCustomer, completion:@escaping (Data?, URLResponse? , Error?)-&gt;()){
    guard let url = URLs.shared.customersURl() else {return}
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    request.httpShouldHandleCookies = false
    do {
        request.httpBody = try JSONSerialization.data(withJSONObject: newCustomer.asDictionary(), options: .prettyPrinted)
        print(try! newCustomer.asDictionary())
    } catch let error {
        print(error.localizedDescription)
    }
    
    //HTTP Headers
    request.addValue("application/json", forHTTPHeaderField: "Content-Type")
    request.addValue("application/json", forHTTPHeaderField: "Accept")
    //response if found
    let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
        completion(data, response, error)
    }
    task.resume()
}

//MARK: - send data and receive data in post request
func networkPost(completion: @escaping ([Complaint]?, Error?) -&gt; (),searchkey:String)
{
    guard let url = URL(string: Url.shared.baseURL) else {return}
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    //body partametars 
    let postString = "indexFrom=1&amp;indexTo=10&amp;serchKey=\(searchkey)";
    request.httpBody = postString.data(using: String.Encoding.utf8);
    
    let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
        
//        guard let data = data,let response = response as? HTTPURLResponse,error == nil
//        else { // check for fundamental networking error
//            print("error", error ?? URLError(.badServerResponse))
//            return
//        }
//        guard (200 ... 299) ~= response.statusCode else {  // check for http errors
//            print("statusCode should be 2xx, but is \(response.statusCode)")
//            print("response = \(response)")
//            return
//        }
        do {
            let responseObject = try JSONDecoder().decode(Posts.self, from: data)
            let productArray = responseObject.complaints
            DispatchQueue.main.async{
                completion(productArray,nil)
            }
        }
        catch {
            print(error)
            DispatchQueue.main.async{
                completion(nil,error)// parsing error
            }
//            if let responseString = String(data: data, encoding: .utf8) {
//                print("responseString = \(responseString)")
//            } else {
//                print("unable to parse response as string")
//            }
        }
        
    }
    task.resume()
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>60DFD5C6-771B-4C4B-B5B6-89C108A68004</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>json post</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
